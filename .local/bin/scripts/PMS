#!/usr/bin/env bash

# Safer script defaults
set -o errexit  # Exit on command failure
set -o nounset  # Exit on unset variables
set -o pipefail # Catch pipe failures
shopt -s nullglob # Prevent globbing of empty matches

# Color codes
BLUE=$'\033[1;34m'
GREEN=$'\033[1;32m'
YELLOW=$'\033[1;33m'
RED=$'\033[1;31m'
NC=$'\033[0m' # No Color

echo -e "${BLUE}Û±ìß Starting Full System Maintenance...${NC}"

### üîê Confirmation
read -rp "${BLUE}Û∞Äò Proceed with maintenance? (y/N): ${NC}" answer
[[ "${answer,,}" =~ ^(y|yes)$ ]] || { echo -e "${RED}Ôëß Cancelled.${NC}"; exit 1; }

### Û∞ö∞ System Update
echo -e "\n${BLUE}Û∞ö∞ Updating system...${NC}"
if sudo pacman -Syu --noconfirm; then
    echo -e "${GREEN}‚úÖ Update complete.${NC}"
else
    echo -e "${RED}‚ùå Failed to update. Consider manual intervention.${NC}"
    exit 1
fi

### Û∞àà Unmount External Drives
echo -e "\n${BLUE}Û∞àà Unmounting external drives...${NC}"
found_disks=0
rootdev=$(findmnt -n -o SOURCE /)
rootdev_base="${rootdev%%[0-9]*}"

while IFS= read -r -d '' disk; do
    [[ "$disk" == "$rootdev_base"* ]] && continue

    mountpoints=$(lsblk -nr -o MOUNTPOINT "$disk" | grep -v '^$' || true)
    if [[ -n "$mountpoints" ]]; then
        found_disks=1
        for mnt in $mountpoints; do
            echo -e "${BLUE}  ÔÖÜ Unmounting $mnt${NC}"
            if sudo umount -v "$mnt"; then
                echo -e "${GREEN}  ÔÄå Successfully unmounted $mnt${NC}"
            else
                echo -e "${RED}  ‚ö†Ô∏è Failed to unmount $mnt${NC}"
            fi
        done
    fi
done < <(find /dev -maxdepth 1 \( -name 'sd?*' -o -name 'nvme?n?*' \) -print0)

[[ "$found_disks" -eq 0 ]] && echo -e "${GREEN}  ÔÅò No external drives to unmount.${NC}"

### Ôë§ Clear Cache
echo -e "\n${BLUE}Ôë§ Clearing memory cache...${NC}"
if sudo sync && echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null; then
    echo -e "${GREEN}‚úÖ Cache cleared.${NC}"
else
    echo -e "${RED}‚ùå Failed to clear cache.${NC}"
fi

### Ôíí Check Disks
echo -e "\n${BLUE}Ôíí Checking disks for SMART and FS errors...${NC}"

# Check for smartmontools
if ! command -v smartctl &>/dev/null; then
    echo -e "${YELLOW}  ÔÅó smartctl not installed${NC}"
    echo -e "${BLUE}  ÔÉß Run: sudo pacman -S smartmontools${NC}"
fi

for dev in /dev/sd? /dev/nvme?n?; do
    [[ ! -b "$dev" ]] && continue
    [[ "$dev" == "$rootdev_base"* ]] && continue

    echo -e "\n${BLUE}  ÔÇ† Checking $dev...${NC}"

    # Partition table check
    echo -e "${BLUE}  Ôãõ Checking partition table...${NC}"
    partition_info=$(sudo fdisk -l "$dev" 2>/dev/null | grep -E "^/dev/")
    if [[ -n "$partition_info" ]]; then
        echo "$partition_info" | while read -r line; do
            echo -e "${GREEN}  ÔÜí $line${NC}"
        done
        echo -e "${GREEN}  ÔÄå Partition table readable${NC}"

        if sudo fdisk -l "$dev" 2>&1 | grep -q "does not start on physical sector boundary"; then
            echo -e "${YELLOW}  ÔÅ± Warning: Partition not aligned to physical sectors${NC}"
            echo -e "${BLUE}  ÔÉß Consider realigning for optimal performance${NC}"
        fi
    else
        echo -e "${YELLOW}  ‚ö†Ô∏è Partition table check failed${NC}"
    fi

    # SMART check
    if command -v smartctl &>/dev/null; then
        echo -e "${BLUE}  Ôà≥ Running SMART check...${NC}"
        smart_result=$(sudo smartctl -H "$dev")
        echo "$smart_result" | grep -E "^SMART|^===|^Test"

        if echo "$smart_result" | grep -q "PASSED"; then
            echo -e "${GREEN}  ÔÄå SMART status: Healthy${NC}"

            # Show critical attributes
            echo -e "${BLUE}  ÔëÅ Key attributes:${NC}"
            sudo smartctl -A "$dev" | grep -E "^  5|^ 10|^184|^187|^188|^197|^198" | awk -v yellow="${YELLOW}" -v green="${GREEN}" -v nc="${NC}" \
                '{if ($2 > 0) print "  " yellow "‚ö†Ô∏è " $0 nc; else print "  " green "ÔÄå " $0 nc}'
        else
            echo -e "${RED}  ‚ö†Ô∏è SMART check failed/unsupported${NC}"
        fi
    fi

    # Filesystem check for partitions only
    partitions=$(lsblk -lnpo NAME "$dev" | grep -v "^$dev$")
    if [[ -n "$partitions" ]]; then
        for part in $partitions; do
            read -rp "${BLUE}  ÔÑ™ Run filesystem check on $part? (y/N): ${NC}" fsck_ans
            if [[ "${fsck_ans,,}" =~ ^(y|yes)$ ]]; then
                echo -e "${BLUE}  Ôè≠ Checking filesystem on $part...${NC}"

                fstype=$(lsblk -no FSTYPE "$part")
                if [[ -z "$fstype" ]]; then
                    echo -e "${YELLOW}  ÔÅó No filesystem detected${NC}"
                    continue
                fi

                echo -e "${BLUE}  ÔÜí Detected filesystem: $fstype${NC}"

                case "$fstype" in
                    ext*)
                        echo -e "${BLUE}  ÔÇ≠ Running fsck for ext filesystem...${NC}"
                        if sudo fsck -y "$part"; then
                            echo -e "${GREEN}  ÔÄå Filesystem check passed${NC}"
                        else
                            echo -e "${YELLOW}  ÔÅ± Trying alternate superblocks...${NC}"
                            for superblock in 8193 32768 16384; do
                                echo -e "${BLUE}  ÔÇ≠ Trying superblock $superblock...${NC}"
                                if sudo fsck -b $superblock -y "$part"; then
                                    echo -e "${GREEN}  ÔÄå Recovery using superblock $superblock succeeded${NC}"
                                    break
                                fi
                            done
                        fi
                        ;;
                    btrfs)
                        echo -e "${BLUE}  ÔÜ≥ Running btrfs check...${NC}"
                        sudo btrfs check --progress "$part" || echo -e "${RED}  ‚ö†Ô∏è Btrfs check found issues${NC}"
                        ;;
                    *)
                        echo -e "${YELLOW}  ÔÅó Unsupported filesystem for automatic repair: $fstype${NC}"
                        ;;
                esac

                if sudo fsck -n "$part"; then
                    echo -e "${GREEN}  ÔÄå Filesystem now valid${NC}"
                else
                    echo -e "${RED}  ÔÅó Filesystem still has errors - may need manual repair${NC}"
                fi
            fi
        done
    else
        echo -e "${GREEN}  ÔÅò No partitions found for checking${NC}"
    fi
done
echo -e "${GREEN}‚úÖ Disk check complete.${NC}"

### Ôá∏ System Cleanup
echo -e "\n${BLUE}Ôá∏ System Cleanup...${NC}"

# 1. Orphaned Packages
echo -e "${BLUE}  ÔÄç Removing orphaned packages...${NC}"
if orphans=$(pacman -Qtdq 2>/dev/null) && [[ -n "$orphans" ]]; then
    echo -e "${BLUE}  ÔÉß Found orphans: $(echo "$orphans" | wc -l) package(s)${NC}"
    sudo pacman -Rns --noconfirm $orphans
    echo -e "${GREEN}  ‚úÖ Orphans removed.${NC}"
else
    echo -e "${GREEN}  ÔÅò No orphaned packages found.${NC}"
fi

# 2. Pacman Cache
echo -e "${BLUE}  Ôêê Clearing pacman cache...${NC}"
if command -v paccache &>/dev/null; then
    sudo paccache -rk2
    echo -e "${GREEN}  ‚úÖ Pacman cache cleaned.${NC}"
else
    echo -e "${YELLOW}  ÔÅ± paccache not found${NC}"
    echo -e "${BLUE}  ÔÉß Run: sudo pacman -S pacman-contrib${NC}"
    sudo pacman -Sc --noconfirm
    echo -e "${GREEN}  ‚úÖ Manual cache cleanup complete.${NC}"
fi

# 3. AUR Helper Cache
echo -e "${BLUE}  ÔåÉ Cleaning AUR helper caches...${NC}"
for aur_helper in yay paru; do
    if command -v "$aur_helper" &>/dev/null; then
        read -rp "${BLUE}  ÔÑ® Clear cache for $aur_helper? (y/N): ${NC}" aur_clean
        if [[ "${aur_clean,,}" =~ ^(y|yes)$ ]]; then
            case "$aur_helper" in
                yay)
                    yay -Sc --noconfirm
                    echo -e "${GREEN}  ÔÄå yay cache cleared${NC}"
                    ;;
                paru)
                    paru -Sc --noconfirm
                    echo -e "${GREEN}  ÔÄå paru cache cleared${NC}"
                    ;;
            esac
        else
            echo -e "${GREEN}  ÔÅò Skipped $aur_helper cache cleaning${NC}"
        fi
    fi
done

# 4. Journal Logs
echo -e "${BLUE}  Ó™á Vacuuming journal logs...${NC}"
sudo journalctl --vacuum-size=100M --vacuum-time=7d 2>/dev/null || \
    echo -e "${RED}  ‚ö†Ô∏è Failed to vacuum journal logs${NC}"

# 5. Temp Files
echo -e "${BLUE}  Ó≠ø Clearing /tmp...${NC}"
sudo find /tmp -mindepth 1 -delete -print 2>/dev/null | head -n 10
echo -e "${GREEN}  ÔÄå /tmp cleaned${NC}"

# 6. User Trash
if command -v trash-empty &>/dev/null; then
    echo -e "${BLUE}  Ôá∏ Emptying user trash...${NC}"
    trash-empty 7
    echo -e "${GREEN}  ÔÄå User trash emptied${NC}"
else
    echo -e "${YELLOW}  ÔÅ± trash-cli not installed${NC}"
    echo -e "${BLUE}  ÔÉß Run: sudo pacman -S trash-cli${NC}"
fi

echo -e "${GREEN}‚úÖ Cleanup complete.${NC}"

### Ôë™ Backup
echo -e "\n${BLUE}Ôë™ Backup Options:${NC}"
echo "  [1] Ôêê Timeshift snapshot"
echo "  [2] ÔÄô Rsync dotfiles"
echo "  [3] ÔÄç Skip"
read -rp "${BLUE}ÔÑ§ Choose backup option [1-3]: ${NC}" backup_choice

case "$backup_choice" in
    1)
        if ! command -v timeshift &>/dev/null; then
            echo -e "${RED}  ‚ùå Timeshift not installed!${NC}"
            echo -e "${BLUE}  ÔÉß Install with: sudo pacman -S timeshift${NC}"
        else
            read -rp "${BLUE}  ÔÇ† Enter backup device (e.g. /dev/sdb1): ${NC}" backup_dev
            sudo mkdir -p /mnt/BackupDrive
            if sudo mount "$backup_dev" /mnt/BackupDrive; then
                echo -e "${BLUE}  Ôêê Running Timeshift snapshot...${NC}"
                if sudo timeshift --create --comments "Auto backup from maintenance.sh" --tags D; then
                    echo -e "${GREEN}  ‚úÖ Timeshift backup complete.${NC}"
                else
                    echo -e "${RED}  ‚ùå Timeshift backup failed!${NC}"
                fi
                sudo umount /mnt/BackupDrive
            else
                echo -e "${RED}  ‚ùå Failed to mount device for backup.${NC}"
            fi
        fi
        ;;
    2)
        BACKUP_DIR="${HOME}/backups/dotfiles-$(date +%Y%m%d-%H%M)"
        echo -e "${BLUE}  Ôêê Backing up dotfiles to $BACKUP_DIR${NC}"
        mkdir -p "$BACKUP_DIR"
        rsync -a --progress --human-readable \
            ~/{.config,.bashrc,.zshrc,.local/bin,.ssh} \
            "$BACKUP_DIR/"
        echo -e "${GREEN}  ‚úÖ Dotfiles backed up. Size: $(du -sh "$BACKUP_DIR" | cut -f1)${NC}"
        ;;
    *)
        echo -e "${GREEN}  ÔÅò Skipped backup.${NC}"
        ;;
esac

### Û∞Ä¶ Optional ClamAV Scan
if command -v clamscan &>/dev/null; then
    echo -e "\n${BLUE}Û∞Ä¶ Optional Virus Scan${NC}"
    read -rp "${BLUE}  ÔÑ® Run ClamAV virus scan? (This may take hours) (y/N): ${NC}" run_clamav
    
    if [[ "${run_clamav,,}" =~ ^(y|yes)$ ]]; then
        echo -e "${BLUE}  Û∞Å´ Starting scan (excluding system directories)...${NC}"
        
        # Update signatures first
        echo -e "${BLUE}  ÔÄô Updating virus definitions...${NC}"
        sudo freshclam || echo -e "${YELLOW}  ‚ö†Ô∏è Continuing with existing definitions${NC}"
        
        # Setup with proper permissions
        QUARANTINE="/root/clamav-quarantine"
        SCAN_LOG="/var/log/clamav-scan-$(date +%Y%m%d).log"
        
        # Ensure proper permissions for log file
        sudo mkdir -p "$QUARANTINE"
        sudo touch "$SCAN_LOG"
        sudo chown clamav:clamav "$SCAN_LOG"
        sudo chmod 644 "$SCAN_LOG"
        
        # Run scan with detailed logging
        echo -e "${BLUE}  ÔáÄ Scanning to: $SCAN_LOG${NC}"
        sudo clamscan -r / \
            --exclude-dir="^/proc" \
            --exclude-dir="^/sys" \
            --exclude-dir="^/dev" \
            --exclude-dir="^/run" \
            --move="$QUARANTINE" \
            --max-filesize=100M \
            --log="$SCAN_LOG"
        
        # Display results with proper permission handling
        echo -e "\n${BLUE}Û∞Ä¶ Scan Summary:${NC}"
        if sudo test -r "$SCAN_LOG"; then
            sudo tail -n 11 "$SCAN_LOG" | grep -E "SCAN SUMMARY|Infected|Scanned|Time:|Data scanned:"
            
            if sudo grep -q "Infected files: 0" "$SCAN_LOG"; then
                echo -e "${GREEN}  ‚úÖ No viruses detected${NC}"
            else
                INFECTED=$(sudo grep "Infected files:" "$SCAN_LOG" | awk '{print $3}')
                echo -e "${RED}  ‚ö†Ô∏è $INFECTED infected files found!${NC}"
                echo -e "${YELLOW}  ÔÅ± Quarantined to: $QUARANTINE${NC}"
            fi
        else
            echo -e "${RED}  ‚ùå Could not read scan log${NC}"
            echo -e "${YELLOW}  ÔÉß Try: sudo cat $SCAN_LOG${NC}"
        fi
    else
        echo -e "${GREEN}  ÔÅò Skipped virus scan${NC}"
    fi
else
    echo -e "${YELLOW}  ÔÅ± ClamAV not installed${NC}"
    echo -e "${BLUE}  ÔÉß Install with: sudo pacman -S clamav${NC}"
fi

### Ôîû System Report
echo -e "\n${BLUE}Ôîû System Report:${NC}"
echo -e "‚ö° CPU Load: $(uptime | awk -F'load average: ' '{print $2}')"
echo -e "üß† Memory: $(free -h | awk '/Mem:/ {print $3"/"$2}')"
echo -e "üíæ Disk Usage:"
df -h / | awk 'NR==1 || $NF=="/"'
echo -e "üåê Network: $(ip a | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | head -1)"

### ‚úÖ Done
echo -e "\n${GREEN}ÔÅò Maintenance tasks completed at $(date)${NC}"
echo -e "${GREEN}‚úÖ Maintenance complete. Your system is optimized!${NC}"
